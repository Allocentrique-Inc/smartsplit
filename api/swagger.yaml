---
swagger: "2.0"
info:
  description: "Provides a RESTful API for interacting with Smartsplit"
  version: "v1"
  title: "Smartsplit API"
  x-origin:
  - format: "yaml"
    url: "https://raw.githubusercontent.com/iptoki/smartsplit/develop/api/swagger.yaml"
  x-providerName: "smartsplit.org"
  x-logo:
    url: "http://smartsplit.org/wp-content/uploads/2019/05/Logo-v02-005-noir.png"
host: "api.smartsplit.org"
basePath: "/v1"
tags:
- name: "Authentication Details"
  description: "Obtaining and refreshing your JWT token"
- name: "Profiles"
  description: "Viewing and creating right holder profiles"
- name: "Media"
  description: "Viewing and creating media"
- name: "Payments"
  description: "Viewing and updating payment details"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- jwt: []
paths:
  /auth:
    post:
      tags:
      - "Authentication Details"
      description: "Get a JWT token for the rest of the requests"
      operationId: "postAuth"
      parameters:
      - in: "body"
        name: "auth"
        description: "JSON string containing your authentication details"
        required: true
        schema:
          $ref: "#/definitions/auth"
      responses:
        200:
          description: "OK. JWT returned for use with the rest of the API requests"
          schema:
            $ref: "#/definitions/authResult"
        401:
          description: "Invalid credentials and/or API token"
      x-swagger-router-controller: "AuthenticationDetails"
  /refresh-token:
    get:
      tags:
      - "Authentication Details"
      description: "Refreshes your current, valid JWT token"
      operationId: "getRefreshToken"
      parameters: []
      responses:
        200:
          description: "OK. JWT returned to use in your subsequent requests"
          schema:
            $ref: "#/definitions/authResult"
        401:
          description: "JWT token is missing or expired"
      security:
      - jwt: []
      x-swagger-router-controller: "AuthenticationDetails"
  /profiles:
    get:
      tags:
      - "Profiles"
      description: "Get a list of all right holder profiles"
      operationId: "getAllProfiles"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/profiles"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    post:
      tags:
      - "Profiles"
      description: "This method creates a new profile"
      operationId: "postProfile"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/profile"
      responses:
        200:
          description: "OK. The profile was created."
          schema:
            $ref: "#/definitions/profile"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Profiles"
  /profiles/{id}:
    get:
      tags:
      - "Profiles"
      description: "Get a right holder's profile with the given ID"
      operationId: "getProfile"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/profile"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    put:
      tags:
      - "Profiles"
      description: "This method updates a profile"
      operationId: "updateProfile"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/profile"
      responses:
        200:
          description: "OK. The profile was created."
          schema:
            $ref: "#/definitions/profile"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Profiles"
    delete:
      tags:
      - "Profiles"
      description: "Delete a right holder's profile with the given ID"
      operationId: "deleteProfile"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK. Profile deleted."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/first-name:
    get:
      tags:
      - "Profiles"
      description: "Get a right holder's first name with the given ID"
      operationId: "getProfileFirstName"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              name:
                type: "string"
                example: "John"
                description: "The right holder's f name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update right holder's first name with the given ID"
      operationId: "patchProfileFirstName"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "first-name"
        description: "The rights holder's first name"
        required: true
        schema:
          $ref: "#/definitions/profile/properties/first-name"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              name:
                type: "string"
                example: "John"
                description: "The right holder's first name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/last-name:
    get:
      tags:
      - "Profiles"
      description: "Get a right holder's last name with the given ID"
      operationId: "getProfileLastName"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              name:
                type: "string"
                example: "Smith"
                description: "The right holder's last name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update right holder's last name with the given ID"
      operationId: "patchProfileLastName"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "last-name"
        description: "The rights holder's last name"
        required: true
        schema:
          $ref: "#/definitions/profile/properties/last-name"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              name:
                type: "string"
                example: "Smith"
                description: "The right holder's last name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/email:
    get:
      tags:
      - "Profiles"
      description: "Get a right holder's email address with given ID"
      operationId: "getProfileEmail"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              email:
                type: "string"
                example: "john.smith@example.com"
                description: "The right holder's email address"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update right holder's email address with given ID"
      operationId: "patchProfileEmail"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "email"
        description: "The rights holder's email address"
        required: true
        schema:
          $ref: "#/definitions/profile/properties/email"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              email:
                type: "string"
                example: "bob.andrews@example.com"
                description: "The right holder's email address"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/role:
    get:
      tags:
      - "Profiles"
      description: "Get a right holder's role with the given ID       (Or list of\
        \ roles including copyright, performance, and/or recording)"
      operationId: "getProfileRole"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              role:
                type: "string"
                example: "writer"
                description: "The right holder's role"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update right holder's role with the given ID       (Or list of\
        \ roles including copyright, performance, and/or recording)"
      operationId: "patchProfileRole"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "role"
        description: "The right holder's role"
        required: true
        schema:
          $ref: "#/definitions/profile/properties/role"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              role:
                type: "string"
                example: "writer"
                description: "The right holder's role"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/ipi:
    get:
      tags:
      - "Profiles"
      description: "Get right holder's interested party information \"#\""
      operationId: "getProfileIPI"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              ipi:
                type: "string"
                example: "00004576"
                description: "The right holder's interested party information number"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update right holder's IPI number"
      operationId: "patchProfileIPI"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "ipi"
        description: "The right holder's IPI number"
        required: true
        schema:
          $ref: "#/definitions/profile/properties/ipi"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              ipi:
                type: "string"
                example: "00004576"
                description: "The right holder's interested party information number"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/media:
    get:
      tags:
      - "Profiles"
      description: "Get list of media for the given right holder"
      operationId: "getProfileMedia"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/mediaIds"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update list of media for the given right holder"
      operationId: "patchProfileMedia"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "mediaId"
        description: "The unique ID of the given media"
        required: true
        schema:
          $ref: "#/definitions/mediaIds"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/profile"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
  /profiles/{id}/wallet:
    get:
      tags:
      - "Profiles"
      description: "Get the wallet address of a right holder"
      operationId: "getProfileWallet"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              wallet:
                type: "string"
                example: "0xdd87ae15f4be97e2739c9069ddef674f907d27a8"
                description: "The user's wallet address"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
    patch:
      tags:
      - "Profiles"
      description: "Update the wallet address of a right holder"
      operationId: "patchProfileWallet"
      parameters:
      - name: "id"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "integer"
      - in: "body"
        name: "wallet"
        description: "The right holder's wallet address"
        required: true
        schema:
          $ref: "#/definitions/profile/properties/wallet"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              wallet:
                type: "string"
                example: "0xdd87ae15f4be97e2739c9069ddef674f907d27a9"
                description: "The user's wallet address"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Profiles"
  /media:
    get:
      tags:
      - "Media"
      description: "Get a list of all media"
      operationId: "getAllMedia"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/medias"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    post:
      tags:
      - "Media"
      description: "This method creates a new media item"
      operationId: "postMedia"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/media"
      responses:
        200:
          description: "OK. The media was created."
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
  /media/{mediaId}:
    get:
      tags:
      - "Media"
      description: "Get media with the given ID"
      operationId: "getMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    put:
      tags:
      - "Media"
      description: "Update media with the given ID"
      operationId: "updateMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/media"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    delete:
      tags:
      - "Media"
      description: "Delete a right holder's profile with the given ID"
      operationId: "deleteMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
  /media/{mediaId}/title:
    get:
      tags:
      - "Media"
      description: "Get the title of the given media identified by ID"
      operationId: "getMediaTitle"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              title:
                type: "string"
                example: "Love You Baby"
                description: "The title of the given artwork"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    patch:
      tags:
      - "Media"
      description: "Update the title of the given media identified by ID"
      operationId: "patchMediaTitle"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "title"
        description: "The title of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/title"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              title:
                type: "string"
                example: "Love You Honey"
                description: "The title of the given artwork"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/description:
    get:
      tags:
      - "Media"
      description: "Get the description of a piece of media"
      operationId: "getMediaDescription"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              description:
                type: "string"
                example: "The wonderful classic hit song, Love You Baby"
                description: "The description of the artwork"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    patch:
      tags:
      - "Media"
      description: "Update the description of a piece of media"
      operationId: "patchMediaDescription"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "description"
        description: "The description of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/description"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              description:
                type: "string"
                example: "The wonderful classic hit song, Love You Honey"
                description: "The description of the artwork"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/right-holders:
    get:
      tags:
      - "Media"
      description: "Get the right holders who collaborated on media"
      operationId: "getMediaRightHolders"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              right-holders:
                type: "object"
                description: "The full name of the right holder"
                additionalProperties:
                  type: "string"
                  description: "The type of right holder, for example, writer, producer"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/jurisdiction:
    get:
      tags:
      - "Media"
      description: "Get the jurisdiction of the given media"
      operationId: "getMediaJurisdiction"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              jurisdiction:
                type: "string"
                example: "SOCAN"
                description: "The jusrisdiction of the artwork agreement of the given\
                  \ media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    patch:
      tags:
      - "Media"
      description: "Update the jurisdiction of the given media"
      operationId: "patchMediaJurisdiction"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "jurisdiction"
        description: "The jurisdiction of the given media"
        required: true
        schema:
          $ref: "#/definitions/media/properties/jurisdiction"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              jurisdiction:
                type: "string"
                example: "SOPROQ"
                description: "The jusrisdiction of the artwork agreement of the given\
                  \ media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/rights-type:
    get:
      tags:
      - "Media"
      description: "Get the type of rights of the given media         (Including copyright,\
        \ performance, recording)"
      operationId: "getMediaRightsType"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              rights-type:
                type: "object"
                example:
                  copyright: true
                  performance: true
                  recording: false
                description: "The type of rights associated with the artwork"
                properties: {}
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/genre:
    get:
      tags:
      - "Media"
      description: "Get the genre of the media with the given ID"
      operationId: "getMediaGenre"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              genre:
                type: "string"
                example: "Rock"
                description: "The genre of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    patch:
      tags:
      - "Media"
      description: "Update the genre of the media with the given ID"
      operationId: "patchMediaGenre"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "genre"
        description: "The genre of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/genre"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              genre:
                type: "string"
                example: "Pop"
                description: "The genre of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/creation-date:
    get:
      tags:
      - "Media"
      description: "Get creation date of the media with the given ID"
      operationId: "getMediaCreationDate"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              creation-date:
                type: "string"
                format: "iso8601-date-time"
                example: "2019-01-01T15:53:00"
                description: "The creation date of the smartsplit contract for the\
                  \ given media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/publisher:
    get:
      tags:
      - "Media"
      description: "Get publisher name of the media with the given ID"
      operationId: "getMediaPublisher"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              publisher:
                type: "string"
                example: "sync publishing"
                description: "The publisher name of the media with the given ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    patch:
      tags:
      - "Media"
      description: "Update publisher of the media with the given ID"
      operationId: "patchMediaPublisher"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "publisher"
        description: "The publisher of the media"
        required: true
        schema:
          $ref: "#/definitions/media/properties/publisher"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              publisher:
                type: "string"
                example: "tune publishing"
                description: "The publisher name of the media with the given ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/split:
    get:
      tags:
      - "Media"
      description: "Get rights holders' percentage split given media"
      operationId: "getMediaSplit"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              split:
                type: "object"
                description: "The percentage split of each right holder"
                additionalProperties:
                  type: "number"
                  description: "The names of the right holders for the given media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
  /payments:
    get:
      tags:
      - "Payments"
      description: "Get a list of all payments' details"
      operationId: "getAllPayments"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payments"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    post:
      tags:
      - "Payments"
      description: "Add a new payment"
      operationId: "postPayment"
      parameters:
      - in: "body"
        name: "body"
        description: "The payment details"
        required: true
        schema:
          $ref: "#/definitions/payment"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payment"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
  /payments/{id}:
    get:
      tags:
      - "Payments"
      description: "Get the details of a payment with the given ID"
      operationId: "getPayment"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payment"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    put:
      tags:
      - "Payments"
      description: "Update the details of a payment with the given ID"
      operationId: "updatePayment"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "The payment details"
        required: true
        schema:
          $ref: "#/definitions/payment"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payment"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    delete:
      tags:
      - "Payments"
      description: "Delete a right holder's profile with the given ID"
      operationId: "deletePayment"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK. Payment deleted"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Payments"
  /payments/{id}/transaction-id:
    get:
      tags:
      - "Payments"
      description: "Get management societies' payment transaction ID"
      operationId: "getPaymentTransactionID"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              transaction-id:
                type: "string"
                example: "124235678"
                description: "The management societies' transaction ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    patch:
      tags:
      - "Payments"
      description: "Update management societies' payment transaction ID"
      operationId: "patchPaymentTransactionID"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "transaction-id"
        description: "The payment transaction ID"
        required: true
        schema:
          $ref: "#/definitions/payment/properties/transaction-id"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              transaction-id:
                type: "string"
                example: "87654321"
                description: "The management societies' transaction ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Payments"
  /payments/{id}/amount:
    get:
      tags:
      - "Payments"
      description: "Get the amount for the given payment"
      operationId: "getPaymentAmount"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              amount:
                type: "number"
                example: 20
                description: "The amount of the payment in $ CAD"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
  /payments/{id}/transaction-hash:
    get:
      tags:
      - "Payments"
      description: "Get blockchain transaction hash of a payment"
      operationId: "getPaymentTransactionHash"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              transaction-hash:
                type: "string"
                example: "0x58a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
                description: "The transaction hash on the blockchain"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    patch:
      tags:
      - "Payments"
      description: "Update blockchain transaction hash of a payment"
      operationId: "patchPaymentTransactionHash"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "transaction-hash"
        description: "The blockchain hash of the transaction"
        required: true
        schema:
          $ref: "#/definitions/payment/properties/transaction-hash"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              transaction-hash:
                type: "string"
                example: "0x68a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
                description: "The transaction hash on the blockchain"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Payments"
securityDefinitions:
  basicAuth:
    description: "HTTP Basic Authentication"
    type: "basic"
  jwt:
    description: "A JSON Web Token (JWT) used for access control and authorization"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  auth:
    properties:
      apiKey:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
  authResult:
    type: "object"
    properties:
      accessToken:
        type: "string"
        example: "fyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJjb21wYW55IjoiRnV0dXJlRWQiLCJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2Z1dHVyZWVkLmRldlwvYXBpXC92MVwvc3R1ZGVudFwvbG9naW5cL3VzZXJuYW1lIiwiaWF0IjoiMTQyNzQyNjc3MSIsImV4cCI6IjE0Mjc0MzAzNzEiLCJuYmYiOiIxNDI3NDI2NzcxIiwianRpIjoiNmFlZDQ3MGFiOGMxYTk0MmE0MTViYTAwOTBlMTFlZTUifQ.MmM2YTUwMjEzYTE0OGNhNjk5Y2Y2MjEwZDdkN2Y1OTQ2NWVhZTdmYmI4OTA5YmM1Y2QwYTMzZjUwNTgwY2Y0MQ"
        description: "The JWT access token for the current session"
    example:
      accessToken: "fyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJjb21wYW55IjoiRnV0dXJlRWQiLCJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2Z1dHVyZWVkLmRldlwvYXBpXC92MVwvc3R1ZGVudFwvbG9naW5cL3VzZXJuYW1lIiwiaWF0IjoiMTQyNzQyNjc3MSIsImV4cCI6IjE0Mjc0MzAzNzEiLCJuYmYiOiIxNDI3NDI2NzcxIiwianRpIjoiNmFlZDQ3MGFiOGMxYTk0MmE0MTViYTAwOTBlMTFlZTUifQ.MmM2YTUwMjEzYTE0OGNhNjk5Y2Y2MjEwZDdkN2Y1OTQ2NWVhZTdmYmI4OTA5YmM1Y2QwYTMzZjUwNTgwY2Y0MQ"
  profiles:
    type: "array"
    description: "An array of profile information"
    items:
      $ref: "#/definitions/profile"
  profile:
    type: "object"
    properties:
      id:
        type: integer
        example: 1
        description: "The unique ID of the given profile"
      first-name:
        type: "string"
        example: "John"
        description: "The name displayed on the user's profile"
      last-name:
        type: "string"
        example: "Smith"
        description: "The name displayed on the user's profile"
      email:
        type: "string"
        example: "john.smith@example.com"
        description: "The email address for this user profile"
      media:
        $ref: "#/definitions/mediaIds"
      ipi:
        type: "string"
        example: "00004576"
        description: "The right holder's interested party information number"
      role:
        type: "string"
        example: "writer"
        description: "The role of the right holder for this user profile"
      wallet:
        type: "string"
        example: "0xdd87ae15f4be97e2739c9069ddef674f907d27a8"
        description: "The blockchain wallet address for this user profile"
    example:
      ipi: "00004576"
      role: "writer"
      wallet: "0xdd87ae15f4be97e2739c9069ddef674f907d27a8"
      media: ""
      first-name: "John"
      email: "john.smith@example.com"
      last-name: "Smith"
  medias:
    type: "array"
    description: "An array of pieces of media"
    items:
      $ref: "#/definitions/media"
  mediaIds:
    type: "array"
    description: "An array of mediaIds referencing media"
    items:
      type: "integer"
      example: 1
  media:
    properties:
      mediaId:
        type: "integer"
        example: 1
        description: "The id of this piece of media"
      title:
        type: "string"
        example: "Love You Baby"
        description: "The title of this piece of media"
      description:
        type: "string"
        example: "The wonderful classic hit song, Love You Baby"
        description: "The short descriptioon of this piece of media"
      cover:
        type: "boolean"
        example: false
        description: "Whether or not this piece of media is a cover"
      right-holders:
        type: "object"
        description: "The full name of the right holder"
        additionalProperties:
          type: "string"
          description: "The type of right holder, for example, writer, producer"
      jurisdiction:
        type: "string"
        example: "SOCAN"
        description: "The Jurisdiction for the given media"
      rights-type:
        type: "object"
        description: "The boolean, 'True' or 'False'"
        additionalProperties:
          type: "string"
          description: "The type of right, for example, copyright, performance, recording"
      genre:
        type: "string"
        example: "Rock"
        description: "The genre of the given media"
      creation-date:
        type: "string"
        format: "iso8601-date-time"
        example: "2019-01-01T15:53:00"
        description: "The creation date of the rights agreement for the given media"
      publisher:
        type: "string"
        example: "sync publishing"
        description: "The publisher for the given media (Left blank if no publisher)"
      split:
        type: "object"
        description: "The percentage split of each right holder"
        additionalProperties:
          type: "number"
          description: "The names of the right holders for the given media"
    example:
      split:
        key: 0.80082819046101150206595775671303272247314453125
      jurisdiction: "SOCAN"
      genre: "Rock"
      description: "The wonderful classic hit song, Love You Baby"
      creation-date: "2019-01-01T15:53:00"
      cover: false
      publisher: "sync publishing"
      rights-type:
        key: "rights-type"
      title: "Love You Baby"
      right-holders:
        key: "right-holders"
  payments:
    type: "array"
    description: "An array of information about payments"
    items:
      $ref: "#/definitions/payment"
  payment:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
        description: "Media ID related to this payment"
      amount: 
        type: "number"
        example: 20
        description: "The amount of the payment in $ CAD"
      transaction-id:
        type: "string"
        example: "12345678"
        description: "The transaction string of the management company for this payment"
      transaction-hash:
        type: "string"
        example: "0x58a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
        description: "The blockchain transaction hash for this payment"
    example:
      transaction-id: "12345678"
      id: 1
      amount: 20
      transaction-hash: "0x58a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
