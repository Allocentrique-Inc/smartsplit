swagger: "2.0"
info:
  description: "Provides a RESTful API for interacting with Smartsplit. Documentation is written in both French and English."
  version: "v1"
  title: "Smartsplit API"
  x-origin:
  - format: "yaml"
    url: "https://raw.githubusercontent.com/iptoki/smartsplit/develop/api/swagger.yaml"
  x-providerName: "smartsplit.org"
  x-logo:
    url: "http://smartsplit.org/wp-content/uploads/2019/05/Logo-v02-005-noir.png"
#host: api.smartsplit.org
basePath: "/v1"
tags:
- name: "Authentication Details"
  description: "Obtaining and refreshing your JWT token"
- name: "RightHolders"
  description: "Viewing and creating right holder profiles"
- name: "Proposals"
  description: "Viewing and creating rights splits for a given media"
- name: "Splitshares"
  description: "Viewing and creating split shares for a given proposal, rightholder and sharee"
- name: "Media"
  description: "Viewing and creating media"
- name: "Payments"
  description: "Viewing and updating payment details"
- name: "Socan"
  description: "Applying to join Socan"
schemes:
- "https"
- "http"
consumes:
- "application/json"
produces:
- "application/json"
security:
- jwt: []
paths:
  /auth:
    post:
      tags:
      - "Authentication Details"
      description: "Get a JWT token for the rest of the requests"
      operationId: "postAuth"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON string containing your password"
        required: true
        schema:
          $ref: "#/definitions/auth"
      responses:
        200:
          description: "OK. JWT returned for use with the rest of the API requests"
          schema:
            $ref: "#/definitions/authResult"
        401:
          description: "Invalid credentials and/or API token"
      x-swagger-router-controller: "AuthenticationDetails"
  /auth/verifyPassword:
    post:
      tags:
      - "Authentication Details"
      description: "Check if the password is valid to access the beta"
      operationId: "postAuthVerifyPassword"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON string containing your authentication details"
        required: true
        schema:
          $ref: "#/definitions/authVerifyPassword"
      responses:
        200:
          description: "Success"
        401:
          description: "Failure. Invalid credentials and/or API token"
      x-swagger-router-controller: "AuthenticationDetails"
  /refreshToken:
    get:
      tags:
      - "Authentication Details"
      description: "Refreshes your current, valid JWT token"
      operationId: "getRefreshToken"
      parameters: []
      responses:
        200:
          description: "OK. JWT returned to use in your subsequent requests"
          schema:
            $ref: "#/definitions/authResult"
        401:
          description: "JWT token is missing or expired"
      security:
      - jwt: []
      x-swagger-router-controller: "AuthenticationDetails"
  /editorsplitshare/invite:
    post:
      tags:
      - Proposals
      description: "invitation d'un bénéficiaire à un vote sur un partage avec un tier"
      operationId: "inviteEditeur"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/splitshareinvite"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/splitshareinvite"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "SplitShare"
  /editorsplitshare:
    post:
      tags:
      - "Splitshares"
      description: "Création d'un partage de droit avec un tier tel qu'un éditeur"
      operationId: "addEditorSplitShare"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/splitshare"
      responses:
        200:
          description: "OK. The split was created."
          schema:
            $ref: "#/definitions/splitshare"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "SplitShare"
  /proposal:
    get:
      tags:
      - "Proposals"
      description: "Get a list of all media split proposals"
      operationId: "getAllProposals"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/listProposals"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Proposals"
    post:
      tags:
      - "Proposals"
      description: "This method creates a new split proposal for a given media"
      operationId: "postProposal"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/proposal"
      responses:
        200:
          description: "OK. The split was created."
          schema:
            $ref: "#/definitions/proposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /splitshare/{proposalId}/{rightHolderId}:
    get:
      tags:
      - "SplitShare"
      operationId: "getSplitShare"
      parameters:
      - name: "proposalId"
        in: "path"
        required: true
        type: "string"
      - name: "rightHolderId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/listProposals"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "SplitShare"
  /splitShare/tiers/voter:
    post:
      tags:
      - SplitShare
      description: "Accepter le vote d'une proposition de part au bénéficiaire"
      operationId: "splitShareVote"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/splitsharevote"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/splitsharevote"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "SplitShare"
  /entities:
    get:
      tags:
      - Entities
      description: "Accepter le vote d'une proposition de part au bénéficiaire"
      operationId: "getAllEntities"      
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/entity"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Entities"
    post:
      tags:
      - Entities
      description: "ajouter une entité pour un utilisateur"
      operationId: "putUserInEntity"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/entityPutUser"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/entityPutUser"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Entities"
  /proposal/derniere-proposition/{mediaId}:
    get:
      tags:
      - "Proposals"
      description: "La dernière proposition pour un média"
      operationId: "getDernierePropositionPourMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/proposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Proposals"
  /proposal/media/{mediaId}:
    get:
      tags:
      - "Proposals"
      description: "Get a list of all split proposals for a given mediaId"
      operationId: "getMediaProposals"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The media unique ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/listProposals"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Proposals"
  /proposal/invite:
    post:
      tags:
      - Proposals
      description: "This method invite a right holder to a proposal"
      operationId: "inviteProposal"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/inviteProposal"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/inviteProposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/justifier-refus:
    post:
      tags:
      - Proposals
      description: "This method justify a split decline"
      operationId: "justifierRefus"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/justifierRefus"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/justifierRefus"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/liste-votes:    
    post:
      tags:
      - Proposals
      description: "This method returns the votation state for a proposal"
      operationId: "listeVotes"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/listeVote"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/listeVote"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/decode:    
    post:
      tags:
      - Proposals
      description: "This method decode a vote token for a proposal"
      operationId: "decodeProposal"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/decodeProposal"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/decodeProposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"  
  /proposal/voter:    
    post:
      tags:
      - "Splits"
      description: "This method accepts a vote for a proposal"
      operationId: "voteProposal"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/voteProposal"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/voteProposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/{uuid}:
    get:
      tags:
      - "Proposals"
      description: "Get a split proposal with the given ID"
      operationId: "getProposal"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split proposal's unique ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/proposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Proposals"
    put:
      tags:
      - "Proposals"
      description: "This method updates a split proposal"
      operationId: "updateProposal"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split proposal's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/proposal"
      responses:
        200:
          description: "OK. The split proposal was created."
          schema:
            $ref: "#/definitions/proposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
    delete:
      tags:
      - "Proposals"
      description: "Delete a right split proposal with the given ID"
      operationId: "deleteProposal"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The splits proposal's unique profile ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK. Split proposal deleted."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/rightHolder/{rightHolderId}:
    get:
      tags:
      - "Proposals"
      description: "Get all split proposals for the given right holder"
      operationId: "getProposalsRightHolder"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The Id of the given right holder"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/proposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Proposals"
  /proposal/{uuid}/mediaId:
    patch:
      tags:
      - "Proposals"
      description: "Update mediaId for given split proposal"
      operationId: "patchProposalMediaId"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split proposal's unique ID"
        required: true
        type: "string"
      - in: "body"
        name: "mediaId"
        description: "The split proposal's media Id"
        required: true
        schema:
          $ref: "#/definitions/proposal/properties/mediaId"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              mediaId:
                type: "integer"
                example: 1
                description: "The mediaId for the given split"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/{uuid}/initiator:
    patch:
      tags:
      - "Proposals"
      description: "Update initiator for a given split proposal"
      operationId: "patchProposalInitiator"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split's unique ID"
        required: true
        type: "string"
      - in: "body"
        name: "initiator"
        description: "The initiator of the given split proposal"
        required: true
        schema:
          $ref: "#/definitions/proposal/properties/initiator"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              splitType:
                type: "object"
                example: {"rightHolderId": 1, "name": "Joe Smith"}
                description: "The initator object of the given split proposal"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/{uuid}/rightsSplits:
    patch:
      tags:
      - "Proposals"
      description: "Update rights split object for given split proposal"
      operationId: "patchProposalRightsSplits"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split proposal's unique ID"
        required: true
        type: "string"
      - in: "body"
        name: "rightsSplits"
        description: "The split proposal's rights splits object"
        required: true
        schema:
          $ref: "#/definitions/proposal/properties/rightsSplits"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/proposal/properties/rightsSplits"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
    post:
      tags:
      - "Proposals"
      description: "Create rights split smart contracts for given split proposal"
      operationId: "postProposalRightsSplits"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split proposal's unique ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "The split proposal's rights splits object"
        required: true
        schema:
          type: "object"
          properties: 
            uuid:
              type: "string"
              example: "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e"
              description: "The unique ID for the given split proposal"
            mediaId:
              type: "integer"
              example: 1
              description: "The Id for the given media which corresponds to the right split"
            rightsSplits:
              type: "object"
              additionalProperties:
                type: "object"
                description: "the copyright object for the given right split"
            initiatorUuid: 
              type: "string"
            initiatorName: 
              type: "string"              
            creationDate:
              type: "string"
              format: "iso8601-date-time"
              example: "2019-01-01T15:53:00"
              description: "the creation date generated at time of split proposal creation"
            _d:
              type: "string"
              example: "1566229239"
              description: "the creation date of split stored as a Unix timestamp (in seconds)"
            comments: 
              type: "array"
              items:
                type: "object"
                description: "the comment and rightHolderId for the given proposal"
            state:
              type: "string"
              description: "define the state of the proposal (BROUILLON, PRET, VOTATION, ACCEPTE, REFUSE"
          example:
            {
              "uuid": "12345c60-7b1a-11e8-9c9c-2d42b21b1a3e",
              "mediaId": "1",
              "initiatorUuid": "40e5ad76-d2c6-4f1e-9eb4-98213e29e36f", 
              "initiatorName": "Jim Smith",
              "creationDate": "2019-01-01T15:53:00",
              "_d": "1566229239",
              "rightsSplits": {
                "workCopyrightSplit": {                                       
                  "music": [
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a3e": "songwriter",
                      "45745c60-7b1a-11e8-9c9c-2d42b21b1a3i": "composer"
                    },
                    "rightHolder": {
                      "rightHolderId": "40e5ad76-d2c6-4f1e-9eb4-98213e29e36f",
                      "name": "Joe Smith",
                      "color": "#FFFFFFF"
                    },
                    "splitPct": "50",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:45:51Z"
                  },
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a3f": "songwriter",
                      "45745c60-7b1a-11e8-9c9c-2d42b21b1a3i": "composer"
                    },
                    "rightHolder": {
                      "rightHolderId": "523bac7a-b14c-4a33-87ad-6aa3e848f2f6",
                      "name": "Bob Andrews",
                      "color": "#FFFFFFF"
                    },
                    "splitPct": "25",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:46:51Z"
                  }
                  ],
                  "lyrics": [
                    {
                      "contributorRole": {
                        "12345c60-7b1a-11e8-9c9c-2d42b21b1a4g": "arranger"
                      },
                      "rightHolder": {
                        "rightHolderId": "8c9a463d-4803-4221-9e96-f940f250e87d",
                        "name": "Joe Duchane",
                        "color": "#000000"
                      },    
                      "splitPct": "25",
                      "voteStatus": "active",
                      "_t": "2019-07-08T16:47:51Z"
                    }
                  ]
                },
                "performanceNeighboringRightSplit": {
                "principal": [
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a3e": "guitarist",
                      "45745c60-7b1a-11e8-9c9c-2d42b21b1a3i": "writer"
                    },
                    "rightHolder": {
                      "rightHolerId": "40e5ad76-d2c6-4f1e-9eb4-98213e29e36f",
                      "name": "Joe Smith",
                      "color": "#111111"
                    },
                    "splitPct": "80",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:40:51Z"
                  }
                ],
                "accompaniment": [
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a3f": "flutist",
                      "45745c60-7b1a-11e8-9c9c-2d42b21b1a3i": "writer"
                    },
                    "rightHolder": {
                      "rightHolderId": "523bac7a-b14c-4a33-87ad-6aa3e848f2f6",
                      "name": "Bob Andrews",
                      "color": "#222222"
                    },
                    "splitPct": "20",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:39:51Z"
                  }
                ]
                },
                "masterNeighboringRightSplit": [
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a3e": "guitarist",
                      "45745c60-7b1a-11e8-9c9c-2d42b21b1a3i": "writer"
                    },
                    "rightHolder": {
                      "rightHolderId": "40e5ad76-d2c6-4f1e-9eb4-98213e29e36f",
                      "name": "Joe Smith",
                      "color": "#222222"
                    },
                    "splitPct": "50",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:45:51Z"
                  },
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a3f": "flutist",
                      "45745c60-7b1a-11e8-9c9c-2d42b21b1a3i": "writer"
                    },
                    "rightHolder": {
                      "rightHolderId": "523bac7a-b14c-4a33-87ad-6aa3e848f2f6",
                      "name": "Bob Andrews",
                      "color": "#555555"
                    },
                    "splitPct": "25",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:46:51Z"
                  },
                  {
                    "contributorRole": {
                      "12345c60-7b1a-11e8-9c9c-2d42b21b1a4g": "composer"
                    },
                    "rightHolder": {
                      "rightHolderId": "8c9a463d-4803-4221-9e96-f940f250e87d",
                      "name": "Joe Duchane",
                      "color": "#FFFFFF"
                    },
                    "splitPct": "25",
                    "voteStatus": "active",
                    "_t": "2019-07-08T16:47:51Z"
                  }
                ]
              },
              "comments": [{
                "rightHolderId": "40e5ad76-d2c6-4f1e-9eb4-98213e29e36f",
                "comment": "Ok"
              },
              {
                "rightHolderId": "523bac7a-b14c-4a33-87ad-6aa3e848f2f6",
                "comment": "Not enough, more split"
              }
              ]
          }
      responses:
        200:
          description: "Smart contracts created"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /proposal/{uuid}/comments:
    patch:
      tags:
      - "Proposals"
      description: "Update coomments array for given split proposal"
      operationId: "patchProposalComments"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The split proposal's unique ID"
        required: true
        type: "string"
      - in: "body"
        name: "comments"
        description: "The split proposal's comments array"
        required: true
        schema:
          $ref: "#/definitions/proposal/properties/comments"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/proposal/properties/comments"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Proposals"
  /rightHolders:
    get:
      tags:
      - "RightHolders"
      description: "Get a list of all right holder profiles"
      operationId: "getAllRightHolders"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/rightHolders"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
    post:
      tags:
      - "RightHolders"
      description: "This method creates a new right holder profile"
      operationId: "postRightHolder"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/rightHolder"
      responses:
        200:
          description: "OK. The right holder profile was created."
          schema:
            $ref: "#/definitions/rightHolder"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}:
    get:
      tags:
      - "RightHolders"
      description: "Get a right holder's profile with the given ID"
      operationId: "getRightHolder"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/rightHolder"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
    put:
      tags:
      - "RightHolders"
      description: "This method updates a right holder profile"
      operationId: "updateRightHolder"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/rightHolder"
      responses:
        200:
          description: "OK. The right holder profile was created."
          schema:
            $ref: "#/definitions/rightHolder"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "RightHolders"
    delete:
      tags:
      - "RightHolders"
      description: "Delete a right holder's profile with the given ID"
      operationId: "deleteRightHolder"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK. Right holder profile deleted."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/firstName:
    patch:
      tags:
      - "RightHolders"
      description: "Update right holder's first name with the given ID"
      operationId: "patchRightHolderFirstName"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "firstName"
        description: "The rights holder's first name"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/firstName"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              firstName:
                type: "string"
                example: "John"
                description: "The right holder's first name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/lastName:
    patch:
      tags:
      - "RightHolders"
      description: "Update right holder's last name with the given ID"
      operationId: "patchRightHolderLastName"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "lastName"
        description: "The rights holder's last name"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/lastName"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              lastName:
                type: "string"
                example: "Smith"
                description: "The right holder's last name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/editeur:
    patch:
      tags:
      - "RightHolders"
      description: "Mise à jour de l'état éditeur avec l'identifiant unique"
      operationId: "patchRightHolderEstEditeur"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "editeur"
        description: "The rights holder's last name"
        required: true
        schema:
          $ref: "#/definitions/rightHolderEditeur"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              lastName:
                type: "boolean"
                example: true
                description: "Est un éditeur ou non"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/email:
    patch:
      tags:
      - "RightHolders"
      description: "Update right holder's email address with given ID"
      operationId: "patchRightHolderEmail"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "email"
        description: "The rights holder's email address"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/email"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              email:
                type: "string"
                example: "bob.andrews@example.com"
                description: "The right holder's email address"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "RightHolders"
  /rightHolders/emailToRightHolderId:
    post:
      tags:
      - "RightHolders"
      description: "Get the right holder's ID given their email address"
      operationId: "postEmailToRightHolderId"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/rightHolder"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              rightHolderId:
                type: "string"
                example: "134a8431-ea1f-4c04-ad1b-dfd27adee166"
                description: "The right holder's ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/requestSource:
    patch:
      tags:
      - "RightHolders"
      description: "Update right holder's requestSource (pochette or smartsplit) address with given ID"
      operationId: "patchRightHolderRequestSource"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "requestSource"
        description: "The rights holder's requestSource, either smartsplit or pochette upon request"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/requestSource"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              requestSource:
                type: "string"
                example: "Smartsplit"
                description: "The application requestSource of the right holder's last request"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/ipi:
    patch:
      tags:
      - "RightHolders"
      description: "Update right holder's IPI number"
      operationId: "patchRightHolderIPI"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "ipi"
        description: "The right holder's IPI number"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/ipi"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              ipi:
                type: "string"
                example: "00004576"
                description: "The right holder's interested party information number"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/jurisdiction:
    patch:
      tags:
      - "RightHolders"
      description: "Update the jurisdiction for the given right holder"
      operationId: "patchRightHolderJurisdiction"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "string"
      - in: "body"
        name: "jurisdiction"
        description: "The jurisdiction of the given right holder"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/jurisdiction"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              jurisdiction:
                type: "string"
                example: "Canada"
                description: "The jusrisdiction of the artwork agreement of the given\
                  \ media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/wallet:
    patch:
      tags:
      - "RightHolders"
      description: "Update the wallet address of a right holder"
      operationId: "patchRightHolderWallet"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "wallet"
        description: "The right holder's wallet address"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/wallet"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              wallet:
                type: "string"
                example: "0xdd87ae15f4be97e2739c9069ddef674f907d27a9"
                description: "The right holder's wallet address"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/artistName:
    patch:
      tags:
      - "RightHolders"
      description: "Update the artist name of a right holder"
      operationId: "patchRightHolderArtistName"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "artistName"
        description: "The right holder's artist name"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/artistName"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              artistName:
                type: "string"
                example: "QuestLove"
                description: "The right holder's artist name"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/avatarImage:
    patch:
      tags:
      - "RightHolders"
      description: "Update the artist name of a right holder"
      operationId: "patchRightHolderAvatarImage"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "avatarImage"
        description: "The right holder's S3 Etag for the profile avatar image"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/avatarImage"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/rightHolder/properties/avatarImage"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/socialMediaLinks:
    patch:
      tags:
      - "RightHolders"
      description: "Update list of social media links for the given right holder"
      operationId: "patchRightHolderSocialMediaLinks"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "socialMediaLinks"
        description: "The object containing the given right holder profile's social media links"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/socialMediaLinks"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/rightHolder"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/groups:
    patch:
      tags:
      - "RightHolders"
      description: "Update the string set of groups for the given right holder"
      operationId: "patchRightHolderGroups"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "groups"
        description: "The array containing the given right holder profile's groups"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/groups"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/rightHolder"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /rightHolders/{rightHolderId}/defaultRoles:
    patch:
      tags:
      - "RightHolders"
      description: "Update default Roles for the given right holder"
      operationId: "patchRightHolderDefaultRoles"
      parameters:
      - name: "rightHolderId"
        in: "path"
        description: "The right holder's unique profile ID"
        required: true
        type: "string"
      - in: "body"
        name: "defaultRoles"
        description: "The array containing the given right holder profile's default Roles"
        required: true
        schema:
          $ref: "#/definitions/rightHolder/properties/defaultRoles"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/rightHolder"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "RightHolders"
  /media:
    get:
      tags:
      - "Media"
      description: "Get a list of all media"
      operationId: "getAllMedia"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/medias"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    put:
      tags: 
      - "Media"
      description: "This method create a new media item from title and type only"
      operationId: "putMedia"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/mediaShort"
      responses:
        200:
          description: "OK. The media was created."
          schema:
            $ref: "#/definitions/mediaShort"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
    post:
      tags:
      - "Media"
      description: "This method creates a new media item"
      operationId: "postMedia"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/media"
      responses:
        200:
          description: "OK. The media was created."
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"  
  /media/liste-createur/{uuid}:
    get:
      tags:
      - "Media"
      description: "Récupère la liste filtrée par utilisateur et ordonnée par identifiant unique"
      operationId: "listeCreateur"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/medias"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/liste-collaborations/{uuid}:
    get:
      tags:
      - "Media"
      description: "Récupère la liste filtrée par utilisateur et ordonnée par identifiant unique"
      operationId: "listeCollaborations"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/medias"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}:
    get:
      tags:
      - "Media"
      description: "Get media with the given ID"
      operationId: "getMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    put:
      tags:
      - "Media"
      description: "Update media with the given ID"
      operationId: "updateMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/media"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
    delete:
      tags:
      - "Media"
      description: "Delete a right holder's profile with the given ID"
      operationId: "deleteMedia"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
  /media/proposal/{mediaId}:
    put:
      tags:
      - "Media"
      description: "Set the media current proposal initiator"
      operationId: "setMediaProposalInitiator"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "Identifiant unique du média"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/mediaProposal"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/title:
    patch:
      tags:
      - "Media"
      description: "Update the title of the given media identified by ID"
      operationId: "patchMediaTitle"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "title"
        description: "The title of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/title"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              title:
                type: "string"
                example: "Love You Honey"
                description: "The title of the given artwork"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/artist:
    patch:
      tags:
      - "Media"
      description: "Update the artist name of a piece of media"
      operationId: "patchMediaArtist"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "artist"
        description: "The artist name of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/artist"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              description:
                type: "string"
                example: "LYB"
                description: "The artist who created the artwork"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/files:
    patch:
      tags:
      - "Media"
      description: "Update the AWS files object  for given media"
      operationId: "patchMediaFiles"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The media unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "files"
        description: "The files object containing the AWS filenames for audio and image files for the given media"
        required: true
        schema:
          $ref: "#/definitions/media/properties/files"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/modificationDate:
    patch:
      tags:
      - "Media"
      description: "Update the modification date of the given media"
      operationId: "patchModificationDate"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "modificationDate"
        description: "The date the rights agreement for the given media was modified"
        required: true
        schema:
          $ref: "#/definitions/media/properties/modificationDate"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              modificationDate:
                type: "string"
                format: "iso8601-date-time"
                example: "2019-01-01T15:53:00"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/publishDate:
    patch:
      tags:
      - "Media"
      description: "Update the publish date of the given media"
      operationId: "patchPublishDate"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "publishDate"
        description: "The date the given media was published"
        required: true
        schema:
          $ref: "#/definitions/media/properties/publishDate"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              publishDate:
                type: "string"
                format: "iso8601-date-time"
                example: "2019-01-01T15:53:00"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/genre:
    patch:
      tags:
      - "Media"
      description: "Update the genre of the media with the given ID"
      operationId: "patchMediaGenre"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "genre"
        description: "The genre of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/genre"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              genre:
                type: "string"
                example: "Pop"
                description: "The genre of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/album:
    patch:
      tags:
      - "Media"
      description: "Update the album name of the media with the given ID"
      operationId: "patchMediaAlbum"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "album"
        description: "The album of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/album"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              genre:
                type: "string"
                example: "Love you Baby"
                description: "The genre of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/publisher:
    patch:
      tags:
      - "Media"
      description: "Update publisher of the media with the given ID"
      operationId: "patchMediaPublisher"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "publisher"
        description: "The publisher of the media"
        required: true
        schema:
          $ref: "#/definitions/media/properties/publisher"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              publisher:
                type: "string"
                example: "tune publishing"
                description: "The publisher name of the media with the given ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/lyrics:
    patch:
      tags:
      - "Media"
      description: "Update the lyrics for the given piece of media"
      operationId: "patchMediaLyrics"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "lyrics"
        description: "The lyrics for the given media"
        required: true
        schema:
          $ref: "#/definitions/media/properties/lyrics"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/isrc:
    patch:
      tags:
      - "Media"
      description: "Update the ISRC of the media with the given ID"
      operationId: "patchMediaISRC"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "isrc"
        description: "The ISRC of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/isrc"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              isrc:
                type: "string"
                example: "abcdef1234567"
                description: "The isrc of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/upc:
    patch:
      tags:
      - "Media"
      description: "Update the UPC of the media with the given ID"
      operationId: "patchMediaUPC"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "upc"
        description: "The UPC of the artwork"
        required: true
        schema:
          $ref: "#/definitions/media/properties/upc"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              upc:
                type: "string"
                example: "123456789111"
                description: "The upc of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/msDuration:
    patch:
      tags:
      - "Media"
      description: "Update the duration of the media with the given ID"
      operationId: "patchMediaDuration"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "msDuration"
        description: "The duration in milliseconds of the given piece of media"
        required: true
        schema:
          $ref: "#/definitions/media/properties/msDuration"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              msDuration:
                type: "string"
                example: "122000"
                description: "The duration in milliseconds of of the given media."
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/socialMediaLinks:
    patch:
      tags:
      - "Media"
      description: "Update list of social media links for the given piece of media"
      operationId: "patchMediaSocialMediaLinks"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "socialMediaLinks"
        description: "The object containing the given piece of media's social media links"
        required: true
        schema:
          $ref: "#/definitions/media/properties/socialMediaLinks"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/streamingServiceLinks:
    patch:
      tags:
      - "Media"
      description: "Update list of streaming service links for the given piece of media"
      operationId: "patchMediaStreamingServiceLinks"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "streamingServiceLinks"
        description: "The object containing the given piece of media's streaming service links"
        required: true
        schema:
          $ref: "#/definitions/media/properties/streamingServiceLinks"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/pressArticleLinks:
    patch:
      tags:
      - "Media"
      description: "Update list of press article links for the given piece of media"
      operationId: "patchMediaPressArticleLinks"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "pressArticleLinks"
        description: "The object containing the given piece of media's press article links"
        required: true
        schema:
          $ref: "#/definitions/media/properties/pressArticleLinks"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/{mediaId}/playlistLinks:
    patch:
      tags:
      - "Media"
      description: "Update list of playlist links for the given piece of media"
      operationId: "patchMediaPlaylistLinks"
      parameters:
      - name: "mediaId"
        in: "path"
        description: "The artwork agreement's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "playlistLinks"
        description: "The object containing the given piece of media's playlist links"
        required: true
        schema:
          $ref: "#/definitions/media/properties/playlistLinks"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/decodeMedia:    
    post:
      tags:
      - Media
      description: "This method decodes a media token for shared media links"
      operationId: "decodeMedia"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/decodeMedia"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/decodeMedia"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
  /media/jetonMedia/{mediaId}/{acces}:
    get:
      tags:
      - Media
      operationId: "jetonMedia"
      parameters:
      - in: "path"
        name: "mediaId"
        type: "string"
        required: true
      - in: "path"
        type: "string"
        name: "acces"
        required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/media"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Media"
  /media/shareMedia:
    post:
      tags:
      - Media
      description: "This method invites a collaborator to a shared link for an audio file"
      operationId: "shareMedia"
      parameters:
      - in: "body"
        name: "body"
        description: "request"
        required: true
        schema:
          $ref: "#/definitions/shareMedia"
      responses:
        200:
          description: "OK."
          schema:
            $ref: "#/definitions/shareMedia"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Media"
  /payments:
    get:
      tags:
      - "Payments"
      description: "Get a list of all payments' details"
      operationId: "getAllPayments"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payments"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    post:
      tags:
      - "Payments"
      description: "Add a new payment"
      operationId: "postPayment"
      parameters:
      - in: "body"
        name: "body"
        description: "The payment details"
        required: true
        schema:
          $ref: "#/definitions/payment"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payment"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
  /payments/{id}:
    get:
      tags:
      - "Payments"
      description: "Get the details of a payment with the given ID"
      operationId: "getPayment"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payment"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    put:
      tags:
      - "Payments"
      description: "Update the details of a payment with the given ID"
      operationId: "updatePayment"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "The payment details"
        required: true
        schema:
          $ref: "#/definitions/payment"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/payment"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Payments"
    delete:
      tags:
      - "Payments"
      description: "Delete a right holder's profile with the given ID"
      operationId: "deletePayment"
      parameters:
      - name: "id"
        in: "path"
        description: "The rights holder's unique profile ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK. Payment deleted"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Payments"
  /payments/{id}/transactionId:
    patch:
      tags:
      - "Payments"
      description: "Update management societies' payment transaction ID"
      operationId: "patchPaymentTransactionID"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "transactionId"
        description: "The payment transaction ID"
        required: true
        schema:
          $ref: "#/definitions/payment/properties/transactionId"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              transactionId:
                type: "string"
                example: "87654321"
                description: "The management societies' transaction ID"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Payments"
  /payments/{id}/transactionHash:
    patch:
      tags:
      - "Payments"
      description: "Update blockchain transaction hash of a payment"
      operationId: "patchPaymentTransactionHash"
      parameters:
      - name: "id"
        in: "path"
        description: "The payment's unique ID"
        required: true
        type: "integer"
      - in: "body"
        name: "transactionHash"
        description: "The blockchain hash of the transaction"
        required: true
        schema:
          $ref: "#/definitions/payment/properties/transactionHash"
      responses:
        200:
          description: "OK"
          schema:
            properties:
              transactionHash:
                type: "string"
                example: "0x68a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
                description: "The transaction hash on the blockchain"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      security:
      - jwt: []
      x-swagger-router-controller: "Payments"
  /socan/join:
    post:
      tags:
      - "Socan"
      description: "join Socan as a writer member"
      operationId: "postSocan"
      parameters:
      - in: "body"
        name: "body"
        description: "The socan member details"
        required: true
        schema:
          $ref: "#/definitions/socan"
      responses:
        200:
          description: "OK. Member application recieved"
        400:
          description: "Bad request"
        403:
          description: "Permission denied"
        404:
          description: "Endpoint not found"
        500:
          description: "An unknown error occured"
      x-swagger-router-controller: "Socan"
securityDefinitions:
  basicAuth:
    description: "HTTP Basic Authentication"
    type: "basic"
  jwt:
    description: "A JSON Web Token (JWT) used for access control and authorization"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  auth:
    properties:
      apiKey:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
  authResult:
    type: "object"
    properties:
      accessToken:
        type: "string"
        example: "fyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJjb21wYW55IjoiRnV0dXJlRWQiLCJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2Z1dHVyZWVkLmRldlwvYXBpXC92MVwvc3R1ZGVudFwvbG9naW5cL3VzZXJuYW1lIiwiaWF0IjoiMTQyNzQyNjc3MSIsImV4cCI6IjE0Mjc0MzAzNzEiLCJuYmYiOiIxNDI3NDI2NzcxIiwianRpIjoiNmFlZDQ3MGFiOGMxYTk0MmE0MTViYTAwOTBlMTFlZTUifQ.MmM2YTUwMjEzYTE0OGNhNjk5Y2Y2MjEwZDdkN2Y1OTQ2NWVhZTdmYmI4OTA5YmM1Y2QwYTMzZjUwNTgwY2Y0MQ"
        description: "The JWT access token for the current session"
    example:
      accessToken: "fyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJjb21wYW55IjoiRnV0dXJlRWQiLCJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2Z1dHVyZWVkLmRldlwvYXBpXC92MVwvc3R1ZGVudFwvbG9naW5cL3VzZXJuYW1lIiwiaWF0IjoiMTQyNzQyNjc3MSIsImV4cCI6IjE0Mjc0MzAzNzEiLCJuYmYiOiIxNDI3NDI2NzcxIiwianRpIjoiNmFlZDQ3MGFiOGMxYTk0MmE0MTViYTAwOTBlMTFlZTUifQ.MmM2YTUwMjEzYTE0OGNhNjk5Y2Y2MjEwZDdkN2Y1OTQ2NWVhZTdmYmI4OTA5YmM1Y2QwYTMzZjUwNTgwY2Y0MQ"
  authVerifyPassword:
    properties:
      password:
        type: "string"
  rightHolders:
    type: "array"
    description: "An array of right holder profile information"
    items:
      $ref: "#/definitions/rightHolder"
  rightHolderEditeur:
    type: "object"
    properties:
      editeur:
        type: "boolean"
  rightHolder:
    type: "object"
    properties:
      rightHolderId:
        type: "string"
        description: "The unique Id for the right holder shared with AWS cognito user pools"
        example: "12345c60-7b1a-11e8-9c9c-2d42b21b1a4g"
      firstName:
        type: "string"
        example: "John"
        description: "The first name displayed on the right holder's profile"
      lastName:
        type: "string"
        example: "Smith"
        description: "The last name displayed on the right holder's profile"
      email:
        type: "string"
        example: "john.smith@example.com"
        description: "The email address for this right holder profile"
      requestSource:
        type: "string"
        example: "pochette"
        description: "The last known application that the user made a request to update account/profile"
      jurisdiction:
        type: "string"
        example: "Canada"
        description: "The country that has jurisdiction over the rights of the right holder"
      ipi:
        type: "string"
        example: "00004576"
        description: "The right holder's interested party information number"
      wallet:
        type: "string"
        example: "0xdd87ae15f4be97e2739c9069ddef674f907d27a8"
        description: "The blockchain wallet address for this right holder profile"
      avatarImage:
        type: "string"
        description: "The file name key in AWS S3 for the given right holder avatar image"
        example: "image.jpg"
      defaultRoles:
        type: "array"
        description: "The array of the default roles for the given right holder profile" 
        items:
          $ref: "#/definitions/rightHolder/properties/defaultRoles"
      groups:
        type: "array"
        description: "The array of the groups for the given right holder profile" 
        items:
          $ref: "#/definitions/rightHolder/properties/groups"
      artistName:
        type: "string"
        description: "The artist name for the given right Holder"
        example: "Questlove"
      accountCreationType: 
        type: "string"
        description: "The string value that describes if the account is self registered or create by a split initiator"
        example: "initiatorCreatedUser"
      locale: 
        type: "string"
        description: "The string value of the locale detected from the browser upon user or initiator account creation"
        example: "fr"
      socialMediaLinks:
        type: "object"
        description: "The urls for the social media profiles for the given right holder, like Facebook, Instagram, Youtube, Twitter"
        additionalProperties:
          type: "string"
          description: "social media links for the given right holder profile"
      editeur:
        type: "boolean"
        description: "Est un ayant-droit éditeur"        
    example:
      rightHolderId: "12345c60-7b1a-11e8-9c9c-2d42b21b1a4g"
      firstName: "John"
      lastName: "Smith"
      email: "john.smith@example.com"
      requestSource: "pochette"
      jurisdiction: "Canada"
      ipi: "00004576"
      wallet: "0xdd87ae15f4be97e2739c9069ddef674f907d27a8"
      avatarImage: "image.jpg"
      artistName: "Questlove"
      groups:
      - "Group 1"
      - "Group 2"
      defaultRoles:
      - "Songwriter"
      - "Producer"
      accountCreationType: "initiatorCreatedUser"
      locale: "en"
      editeur: true
      socialMediaLinks: 
        facebook: "https://facebook.com/ex"
        twitter: "https://twitter.com/ex"
        youtube: "https://youtube.com/ex"
  medias:
    type: "array"
    description: "An array of pieces of media"
    items:
      $ref: "#/definitions/media"
  mediaIds:
    type: "array"
    description: "An array of mediaIds referencing media"
    items:
      type: "integer"
      example: 1
  mediaShort:
    properties:
      titre:
        type: "string"
      type:
        type: "string"
      createur:
        type: "string"
  media:
    properties:
      creator:
        type: "string"
      mediaId:
        type: "string"
        example: 1
        description: "The id of this piece of media"
      title:
        type: "string"
        example: "Love You Baby"
        description: "The title of this piece of media"
      album:
        type: "string"
        example: "Love You Baby Album"
        description: "The title of the album for this piece of media"
      artist:
        type: "string"
        example: "LYB"
        description: "The artist name who created this piece of media"
      cover:
        type: "string"
      msDuration:
        type: "string"
        example: "120000"
        description: "The duration in milliseconds for the given media"
      bpm:
        type: "string"      
      type:
        type: "string"
        example: "remix"
        description: "Whether or not this piece of media is a cover, remix, or original song"
      genre:
        type: "string"
        example: "Rock"
        description: "The genre of the given media"
      secondaryGenres:
        type: "array"
        items:
          type: "string"
      creationDate:
        type: "string"
        format: "unix timestamp"
        example: "1234567891234"
        description: "The creation date of the rights agreement for the given media"      
      publishDate:
        type: "string"
        format: "iso8601-date-time"
        example: "2019-01-01T15:53:00"
        description: "The date of first broadcast/publication for the given media"
      publisher:
        type: "string"
        example: "sync publishing"
        description: "The publisher for the given media (Left blank if no publisher)"
      fichier:
        type: "string"
      lyrics:
        type: "object"
        properties: 
          text:
            type: "string"          
          languages:
            type: "array"
            items:
              type: "string"
          access: 
            type: "string"
        description: "The lyrics of the given media"
        example: "Love you Baby. Love you Baby. Love you Baby. Love you Baby. Love you Baby. Baby. Wooo. Love You Baby."      
      isrc:
        type: "string"
        description: "The ISRC of the given media"
        example: "abcde1234567"
      iswc:
        type: "string"
        description: "The ISRC of the given media"
        example: "abcde1234567"
      upc:
        type: "string"
        description: "The UPC of the given media"
        example: "123456789111"
      socialMediaLinks:
        type: "array"
        description: "The urls for the given media for social media like Facebook, Instagram, and Twitter."
        items:
          type: "object"
          description: "social media links for the given media" 
      streamingServiceLinks:
        type: "array"
        description: "The urls for the given media for streaming services like Spotify and Apple Music"
        items:
          type: "object"
          description: "streaming service links for the given media" 
      pressArticleLinks:
        type: "array"
        description: "The urls for news articles about the given media like music blogs and newspapers"
        items:
          type: "object"
          description: "press article links for the given media" 
      playlistLinks:
        type: "array"
        description: "The urls for playlists of similar songs to the given media like Spotify or Youtube playlists"
        items:
          type: "object"
          description: "playlist links for the given media"
      files:
        type: "object"
        properties:
          cover:
            type: "object"
          audio:
            type: "object"
          score:
            type: "object"
          midi:
            type: "object"      
      rightHolders:
        type: "array"
        description: "The rightholders and roles associated to this media"
        items: 
          type: "object"
          description: "Names of rightholder"
      remixer:
        type: "string"
      distributor:
        type: "string"
      distributorAddress:
        type: "string"
      label:
        type: "string"
      labelAddress:
        type: "string"
      studio:
        type: "string"
      studioAddress:
        type: "string"
      influence:
        type: "string"
      jurisdiction:
        type: "string"
    example:
      [
        {
          title: "Love You Baby",
          artist: "LYB",
          genre: "Rock",
          secondaryGenres: ["Pop"],
          creationDate: "2019-01-01T15:53:00",
          modificationDate: "2019-01-01T15:53:01",
          publishDate: "2019-01-01T15:53:02",
          type: "original",
          isrc: "abcde1234567",
          upc: "123456789111",
          publisher: "sync publishing",
          msDuration: "288000",
          lyrics: {
            text: "Love you Baby. Love you Baby. Love you Baby. Love you Baby. Love you Baby. Baby. Wooo. Love You Baby.",
            languages: ["en"],
            access: "private"
          },
          files: {
            cover: {
              files: [
                {file: "cover.jpg", access: "private"}
              ]
            }
          },
          socialMediaLinks: [
            {name: "facebook", url: "https://facebook.com/ex"},
            {name: "twitter",  url: "https://twitter.com/ex"},
            {name: "youtube",  url: "https://youtube.com/ex"}
          ],
          streamingServiceLinks: [
            {name: "spotify", url: "https://open.spotify.com/track/asdgj4qhfasd"},
            {name: "apple",   url: "https://twitter.com/ex"}
          ],
          pressArticleLinks: [
            {name: "medium", url: "https://medium.com/ex"},
            {name: "metro",  url: "https://metro.ca/ex"}
          ],
          playlistLinks: [
            {name: "spotify", url: "https://open.spotify.com/playlist/37i9dQZEVXbKfIuOAZrk7G"},
            {name: "youtube", url: "https://www.youtube.com/playlist?list=PLgzTt0k8mXzEk586ze4BjvDXR7c-TUSnx"}
          ]
        }
      ]
  decodeMedia:
    type: "object"
    properties: 
      token:
        type: "string"
        example: "JWT Token"
        description: "The JWT to decode"      
    example:
      {
        "token": "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e.xyz.xzdv"
      }  
  shareMedia:
    type: "object"
    properties: 
      mediaId:
        type: "integer"        
      acces:
        type: "integer"        
      prenom:
        type: "string"        
      nom: 
        type: "string"        
      courriel:
        type: "string" 
    example:
      {
        "mediaId": 111,
        "acces": 1,
        "prenom": "Bob",
        "nom": "Gratton",
        "courriel": "bob@example.com"
      }
  listProposals:
    type: "array"
    description: "An array of information about splits"
    items:
      $ref: "#/definitions/proposal"
  justifierRefus:
    type: "object"
    properties:
      userId:
        type: "string"
        example: "1"
        description: "UUID utilisateur"      
      jeton:
        type: "string"
        example: "JWT Token"
        description: "Le jeton JWT à décoder"
      raison:
        type: "string"
        example: "Je ne suis pas d'accord"
        description: "Raison du refus"
  rightHolderShort:
    type: "object"
    description: "Structure courte d'un ayant-droit (nom, id, courriel)"
    properties:
      name:
        type: "string"
      rightHolderId:
        type: "string"
      email:
        type: "string"
  inviteProposal:
    type: "object"
    properties: 
      proposalId:
        type: "string"
        example: "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e"
        description: "The unique ID for the given split"
      rightHolders:
        type: "object"
        example: "{{rightHolderId: '2', name: 'Vincent', email: 'vincent@smartsplit.org'}, ... }"
        description: "Un tableau de colaborateurs (nom, id et courriel)"
        items:
          $ref: "#/definitions/rightHolderShort"
    example:
      {
        "proposalId": "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e"
      }
  listeVote:
    type: "object"
    properties: 
      proposalId:
        type: "string"
        example: "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e"
        description: "UUID de la propositino"
    example:
      {
        "splitId": "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e.xyz.xzdv"
      }
  decodeProposal:
    type: "object"
    properties: 
      jeton:
        type: "string"
        example: "JWT Token"
        description: "Le jeton JWT à décoder"      
    example:
      {
        "jeton": "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e.xyz.xzdv"
      }
  voteProposal:
    type: "object"
    properties:
      userId:
        type: "string"
        example: "1"
        description: "UUID utilisateur"
      jeton:
        type: "string"
        example: "JWT Token"
        description: "Le jeton JWT à décoder"
      droits:
        type: "object"
        additionalProperties:
          type: "object"
        example: "{workCopyrightSplit: 'ACCEPTE', ...}"
        description: "Objet décrivant les splits et les états"
    example:
      {
        "jeton": "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e.xyz.xzdv",
        "userId": "1",
        "droit": "workCopyrightSplit"
      }
  proposal:
    type: "object"
    properties: 
      uuid:
        type: "string"
        example: "45745c60-7b1a-11e8-9c9c-2d42b21b1a3e"
        description: "The unique ID for the given split proposal"
      mediaId:
        type: "integer"
        example: 1
        description: "The Id for the given media which corresponds to the right split"
      rightsSplits:
        type: "object"
        additionalProperties:
          type: "object"
          description: "the copyright object for the given right split"
      initiatorUuid: 
        type: "string"        
      initiatorName: 
        type: "string"
      creationDate:
        type: "string"
        format: "iso8601-date-time"
        example: "2019-01-01T15:53:00"
        description: "the creation date generated at time of split proposal creation"
      _d:
        type: "string"
        example: "1566229239"
        description: "the creation date of split stored as a Unix timestamp (in seconds)"
      comments: 
        type: "array"
        items:
          type: "object"
          description: "the comment and rightHolderId for the given proposal"
      state:
        type: "string"
        description: "define the state of the proposal (BROUILLON, PRET, VOTATION, ACCEPTE, REFUSE"    
  splitsharevote:
    type: "object"
    properties:
      userId:
        type: "string"
        description: "Identifiant de l'ayant-droit bénéficiaire"  
      choix:
        type: "string"
        description: "Choix de vote"
      jeton:
        type: "string"
        description: "Jeton de votation pour un tiers"
  splitshareinvite:
    type: "object"
    properties:
      proposalId:
        type: "string"
        description: "Identifiant de la proposition"
      rightHolder:
        type: "object"
        description: "Ayant-droit qui partage"
        properties:
          nom:
            type: "string"
          uuid:
            type: "string"
      shareeId:
        type: "string"
        description: "Identifiant de l'ayant-droit qui bénéficie"
      mediaId:
        type: "integer"
  splitshare:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "Identifiant de la proposition"
      rightHolderId:
        type: "string"
        description: "Identifiant unique de l'ayant-droit qui partage"
      shareeId:
        type: "string"
        description: "Identifiant unique de l'ayant-droit qui bénificie (p.ex., l'éditeur)"
      rightHolderPct:
        type: "string"
        description: "% de l'ayant-droit"
      shareePct:
        type: "string"
        description: "% de l'ayant-droit qui bénéficie"
  entity:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "Identifiant de la proposition"
      members:
        type: "array"
        items:
          type: "string"      
      name:
        type: "string"
        description: "Identifiant unique de l'ayant-droit qui bénificie (p.ex., l'éditeur)"
      type:
        type: "string"
        description: "% de l'ayant-droit"
  entityPutUser:
    type: "object"
    properties:
      entite:
        type: "string"
        description: "nom de l'entité"
      username:
        type: "string"
        description: "utilisateur (uuid)"      
  payments:
    type: "array"
    description: "An array of information about payments"
    items:
      $ref: "#/definitions/payment"
  payment:
    type: "object"
    properties:
      id:
        type: "string"
        example: "1"
        description: "Media ID related to this payment"
      amount: 
        type: "number"
        example: 20
        description: "The amount of the payment in $ CAD (cents)"
      payee: 
        type: "string"
        example: "2"
        description: "The ID of the profile of the creator who was paid"
      transactionId:
        type: "string"
        example: "12345678"
        description: "The transaction string of the management company for this payment"
      transactionHash:
        type: "string"
        example: "0x58a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
        description: "The blockchain transaction hash for this payment"
    example:
      transactionId: "12345678"
      id: "abcdef"
      amount: 200
      payee: "2"
      transactionHash: "0x58a4c5ff945f8f1c0d0218466886d1e860c78cb625a2a4860e1efaf3a7c33b0c"
  mediaProposal:
    type: "object"
    properties:          
      rightHolderId: 
        type: "string"      
  socan:
    type: "object"
    properties:
      GIVEN_NAMES: 
        type: "string"
        example: "Bob"
        description: "Legal first name"
      MIDDLE_NAME: 
        type: "string"
        example: "Bobby"
        description: "Legal first name"
      LAST_NAME:
        type: "string"
        example: "Smith"
        description: "Legal last name"
      DATE_OF_BIRTH: 
        type: "string"
        example: "01/01/1984"
      STREET1: 
        type: "string"
        example: "6750 Avenue de L'Esplanade, 102"
      CITY: 
        type: "string"
        example: "Montreal"
      PROVINCE: 
        type: "string"
        example: "QC"
      COUNTRY: 
        type: "string"
        example: "CAN"
      POSTAL_CODE: 
        type: "string"
        example: "H2V4M1"
      PHONE_NO1: 
        type: "string"
        example: "514 100 1000"
      EMAIL_ADDRESS: 
        type: "string"
        example: "socan@iptoki.com"
      EMAIL_ADDRESS_VERIFY: 
        type: "string"
        example: "socan@iptoki.com"
      USER_ID: 
        type: "string"
        example: "iptoki"
      PASSWORD: 
        type: "string"
        example: "12345678"
      PASSWORD_VERIFY:
        type: "string"
        example: "12345678"
      HEAR_OF_SOCAN: 
        type: "string"
        example: "OTHER"
      LANGUAGE_PREFERENCE:
        type: "string" 
        example: "E"
      TERMS: 
        type: "string"
        example: "Y"
    example:
      GIVEN_NAMES: "IPtoki"
      MIDDLE_NAME: "Socan"
      LAST_NAME: "Test"
      DATE_OF_BIRTH: "01/01/1984"
      STREET1: "6750 Avenue de L'Esplanade, 102"
      CITY: "Montreal"
      PROVINCE: "QC"
      COUNTRY: "CAN"
      POSTAL_CODE: "H2V4M1"
      PHONE_NO1: "514 100 1000"
      EMAIL_ADDRESS: "socan@iptoki.com"
      EMAIL_ADDRESS_VERIFY: "socan@iptoki.com"
      USER_ID: "iptoki"
      PASSWORD: "12345678"
      PASSWORD_VERIFY: "12345678"
      HEAR_OF_SOCAN: "OTHER"
      LANGUAGE_PREFERENCE: "E"
      TERMS: "Y"
