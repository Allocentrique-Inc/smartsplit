{
  "swagger": "2.0",
  "info": {
    "description": "Provides a RESTful API for interacting with Smartsplit",
    "version": "v1",
    "title": "Smartsplit API",
    "x-origin": [
      {
        "format": "yaml",
        "url": "https://raw.githubusercontent.com/iptoki/smartsplit/develop/api/swagger.yaml"
      }
    ],
    "x-providerName": "smartsplit.org",
    "x-logo": {
      "url": "http://smartsplit.org/wp-content/uploads/2019/05/Logo-v02-005-noir.png"
    }
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "tags": [
    {
      "name": "Authentication Details",
      "description": "Obtaining and refreshing your JWT token"
    },
    {
      "name": "Profiles",
      "description": "Viewing and creating right holder profiles"
    },
    {
      "name": "Media",
      "description": "Viewing and creating media"
    },
    {
      "name": "Payments",
      "description": "Viewing and updating payment details"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "jwt": []
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "Authentication Details"
        ],
        "description": "Get a JWT token for the rest of the requests",
        "operationId": "postAuth",
        "parameters": [
          {
            "in": "body",
            "name": "auth",
            "description": "JSON string containing your authentication details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. JWT returned for use with the rest of the API requests",
            "schema": {
              "$ref": "#/definitions/authResult"
            }
          },
          "401": {
            "description": "Invalid credentials and/or API token"
          }
        },
        "x-swagger-router-controller": "AuthenticationDetails"
      }
    },
    "/refreshToken": {
      "get": {
        "tags": [
          "Authentication Details"
        ],
        "description": "Refreshes your current, valid JWT token",
        "operationId": "getRefreshToken",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK. JWT returned to use in your subsequent requests",
            "schema": {
              "$ref": "#/definitions/authResult"
            }
          },
          "401": {
            "description": "JWT token is missing or expired"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "AuthenticationDetails"
      }
    },
    "/profiles": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "description": "Get a list of all right holder profiles",
        "operationId": "getAllProfiles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/profiles"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Profiles"
      },
      "post": {
        "tags": [
          "Profiles"
        ],
        "description": "This method creates a new profile",
        "operationId": "postProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The profile was created.",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Profiles"
      }
    },
    "/profiles/{id}": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "description": "Get a right holder's profile with the given ID",
        "operationId": "getProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rights holder's unique profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Profiles"
      },
      "put": {
        "tags": [
          "Profiles"
        ],
        "description": "This method updates a profile",
        "operationId": "updateProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rights holder's unique profile ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The profile was created.",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Profiles"
      },
      "delete": {
        "tags": [
          "Profiles"
        ],
        "description": "Delete a right holder's profile with the given ID",
        "operationId": "deleteProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rights holder's unique profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Profile deleted."
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Profiles"
      }
    },
    "/media": {
      "get": {
        "tags": [
          "Media"
        ],
        "description": "Get a list of all media",
        "operationId": "getAllMedia",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/medias"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Media"
      },
      "post": {
        "tags": [
          "Media"
        ],
        "description": "This method creates a new media item",
        "operationId": "postMedia",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/media"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The media was created.",
            "schema": {
              "$ref": "#/definitions/media"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Media"
      }
    },
    "/media/{mediaId}": {
      "get": {
        "tags": [
          "Media"
        ],
        "description": "Get media with the given ID",
        "operationId": "getMedia",
        "parameters": [
          {
            "name": "mediaId",
            "in": "path",
            "description": "The artwork agreement's unique ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/media"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Media"
      },
      "put": {
        "tags": [
          "Media"
        ],
        "description": "Update media with the given ID",
        "operationId": "updateMedia",
        "parameters": [
          {
            "name": "mediaId",
            "in": "path",
            "description": "The artwork agreement's unique ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/media"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/media"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Media"
      },
      "delete": {
        "tags": [
          "Media"
        ],
        "description": "Delete a right holder's profile with the given ID",
        "operationId": "deleteMedia",
        "parameters": [
          {
            "name": "mediaId",
            "in": "path",
            "description": "The rights holder's unique profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Media"
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "description": "Get a list of all payments' details",
        "operationId": "getAllPayments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payments"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Payments"
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "description": "Add a new payment",
        "operationId": "postPayment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The payment details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Payments"
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "description": "Get the details of a payment with the given ID",
        "operationId": "getPayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment's unique ID",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Payments"
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "description": "Update the details of a payment with the given ID",
        "operationId": "updatePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment's unique ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payment details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Payments"
      },
      "delete": {
        "tags": [
          "Payments"
        ],
        "description": "Delete a right holder's profile with the given ID",
        "operationId": "deletePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rights holder's unique profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Payment deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "An unknown error occured"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "x-swagger-router-controller": "Payments"
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Amazon Signature authorization v4",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "definitions": {
    "auth": {
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "authResult": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "The JWT access token for the current session"
        }
      }
    },
    "profiles": {
      "type": "array",
      "description": "An array of profile information",
      "items": {
        "$ref": "#/definitions/profile"
      }
    },
    "profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique ID of the given profile"
        },
        "firstName": {
          "type": "string",
          "description": "The name displayed on the user's profile"
        },
        "lastName": {
          "type": "string",
          "description": "The name displayed on the user's profile"
        },
        "email": {
          "type": "string",
          "description": "The email address for this user profile"
        },
        "media": {
          "$ref": "#/definitions/mediaIds"
        },
        "ipi": {
          "type": "string",
          "description": "The right holder's interested party information number"
        },
        "contributorRole": {
          "type": "string",
          "description": "The role of the right holder for this user profile"
        },
        "wallet": {
          "type": "string",
          "description": "The blockchain wallet address for this user profile"
        }
      }
    },
    "medias": {
      "type": "array",
      "description": "An array of pieces of media",
      "items": {
        "$ref": "#/definitions/media"
      }
    },
    "mediaIds": {
      "type": "array",
      "description": "An array of mediaIds referencing media",
      "items": {
        "type": "integer"
      }
    },
    "media": {
      "properties": {
        "mediaId": {
          "type": "integer",
          "description": "The id of this piece of media"
        },
        "title": {
          "type": "string",
          "description": "The title of this piece of media"
        },
        "album": {
          "type": "string",
          "description": "The title of the album for this piece of media"
        },
        "description": {
          "type": "string",
          "description": "The short descriptioon of this piece of media"
        },
        "cover": {
          "type": "boolean",
          "description": "Whether or not this piece of media is a cover"
        },
        "rightHolders": {
          "type": "object",
          "description": "The full name of the right holder"
        },
        "jurisdiction": {
          "type": "string",
          "description": "The Jurisdiction for the given media"
        },
        "rightsType": {
          "type": "object",
          "description": "The boolean, 'True' or 'False'"
        },
        "genre": {
          "type": "string",
          "description": "The genre of the given media"
        },
        "secondaryGenre": {
          "type": "string",
          "description": "The secondary genre of the given media"
        },
        "creationDate": {
          "type": "string",
          "format": "iso8601-date-time",
          "description": "The creation date of the rights agreement for the given media"
        },
        "modificationDate": {
          "type": "string",
          "format": "iso8601-date-time",
          "description": "The date the rights agreement for the given media was modified"
        },
        "publishDate": {
          "type": "string",
          "format": "iso8601-date-time",
          "description": "The date of first broadcast/publication for the given media"
        },
        "publisher": {
          "type": "string",
          "description": "The publisher for the given media (Left blank if no publisher)"
        },
        "rightsSplit": {
          "type": "object",
          "description": "The percentage split of each right holder"
        }
      }
    },
    "payments": {
      "type": "array",
      "description": "An array of information about payments",
      "items": {
        "$ref": "#/definitions/payment"
      }
    },
    "payment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Media ID related to this payment"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the payment in $ CAD"
        },
        "payee": {
          "type": "number",
          "description": "The ID of the profile of the creator who was paid"
        },
        "transactionId": {
          "type": "string",
          "description": "The transaction string of the management company for this payment"
        },
        "transactionHash": {
          "type": "string",
          "description": "The blockchain transaction hash for this payment"
        }
      }
    }
  }
}